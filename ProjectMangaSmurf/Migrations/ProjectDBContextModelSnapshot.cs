// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectMangaSmurf.Data;

#nullable disable

namespace ProjectMangaSmurf.Migrations
{
    [DbContext(typeof(ProjectDBContext))]
    partial class ProjectDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Avatar", b =>
                {
                    b.Property<string>("IdAvatar")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AvatarContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("IdAvatar")
                        .HasName("PK__Avatar__58BB37B073CA3349");

                    b.ToTable("Avatar", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.BoTruyen", b =>
                {
                    b.Property<string>("IdBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id_bo")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("AnhBanner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("anh_banner");

                    b.Property<string>("AnhBia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("anh_bia");

                    b.Property<byte>("Dotuoi")
                        .HasColumnType("tinyint")
                        .HasColumnName("dotuoi");

                    b.Property<string>("IdTg")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("id_tg")
                        .IsFixedLength();

                    b.Property<string>("Listloai")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("listloai");

                    b.Property<string>("Mota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mota");

                    b.Property<string>("TenBo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ten_bo");

                    b.Property<double>("TkDanhgia")
                        .HasColumnType("float")
                        .HasColumnName("tk_danhgia");

                    b.Property<int>("TkTheodoi")
                        .HasColumnType("int")
                        .HasColumnName("tk_theodoi");

                    b.Property<int>("TongLuotXem")
                        .HasColumnType("int");

                    b.Property<byte>("TrangThai")
                        .HasColumnType("tinyint")
                        .HasColumnName("trang_thai");

                    b.Property<bool>("TtPemium")
                        .HasColumnType("bit")
                        .HasColumnName("tt_pemium");

                    b.HasKey("IdBo");

                    b.HasIndex(new[] { "IdTg" }, "IX_BoTruyen_id_tg");

                    b.ToTable("BoTruyen", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Chapter", b =>
                {
                    b.Property<int>("SttChap")
                        .HasColumnType("int")
                        .HasColumnName("stt_chap");

                    b.Property<string>("IdBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id_bo")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("ChapterContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TenChap")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ten_chap");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime")
                        .HasColumnName("thoi_gian");

                    b.Property<byte?>("TicketCost")
                        .HasColumnType("tinyint");

                    b.Property<int>("TkLuotxem")
                        .HasColumnType("int")
                        .HasColumnName("tk_luotxem");

                    b.Property<byte?>("TrangThai")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TtPemium")
                        .HasColumnType("bit")
                        .HasColumnName("tt_pemium");

                    b.HasKey("SttChap", "IdBo");

                    b.HasIndex(new[] { "IdBo" }, "IX_Chapter_id_bo");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.ContactMail", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("ContactMail", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtBoTruyen", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("IbBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ib_bo")
                        .IsFixedLength();

                    b.Property<byte>("DanhGia")
                        .HasColumnType("tinyint")
                        .HasColumnName("danh gia");

                    b.Property<string>("LsMoi")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ls_moi");

                    b.Property<bool>("Theodoi")
                        .HasColumnType("bit")
                        .HasColumnName("theodoi");

                    b.HasKey("IdUser", "IbBo");

                    b.HasIndex(new[] { "IbBo" }, "IX_CT_BoTruyen_ib_bo");

                    b.ToTable("CT_BoTruyen", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtChapter", b =>
                {
                    b.Property<int>("SoTrang")
                        .HasColumnType("int")
                        .HasColumnName("so_trang");

                    b.Property<int>("SttChap")
                        .HasColumnType("int")
                        .HasColumnName("stt_chap");

                    b.Property<string>("IdBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id_bo")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("AnhTrang")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("anh_trang");

                    b.HasKey("SoTrang", "SttChap", "IdBo");

                    b.HasIndex(new[] { "SttChap", "IdBo" }, "IX_CT_Chapter_stt_chap_id_bo");

                    b.ToTable("CT_Chapter", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtHoatDong", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("SttChap")
                        .HasColumnType("int")
                        .HasColumnName("stt_chap");

                    b.Property<string>("IdBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id_bo")
                        .IsFixedLength();

                    b.Property<bool?>("TtDoc")
                        .HasColumnType("bit")
                        .HasColumnName("tt_doc");

                    b.HasKey("IdUser", "SttChap", "IdBo");

                    b.HasIndex(new[] { "SttChap", "IdBo" }, "IX_CT_HoatDong_stt_chap_id_bo");

                    b.ToTable("CT_HoatDong", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtLoaiTruyen", b =>
                {
                    b.Property<string>("IdLoai")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id_loai")
                        .IsFixedLength();

                    b.Property<string>("IdBo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id_bo")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.HasKey("IdLoai", "IdBo");

                    b.HasIndex(new[] { "IdBo" }, "IX_CT_LoaiTruyen_id_bo");

                    b.ToTable("CT_LoaiTruyen", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CustomerLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK__Customer__2B2C5B526B2A5304");

                    b.HasIndex("IdUser");

                    b.ToTable("Customer_Login", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.KhachHang", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool?>("ActivePremium")
                        .HasColumnType("bit")
                        .HasColumnName("Active_Premium");

                    b.Property<byte?>("ActiveStats")
                        .HasColumnType("tinyint")
                        .HasColumnName("Active_Stats");

                    b.Property<string>("FacebookAccount")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("GoogleAccount")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("IdAvatar")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int?>("TicketSalary")
                        .HasColumnType("int");

                    b.HasKey("IdUser")
                        .HasName("PK_KhachHang_1");

                    b.HasIndex("IdAvatar");

                    b.ToTable("KhachHang", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.LoaiTruyen", b =>
                {
                    b.Property<string>("IdLoai")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id_loai")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ten_loai");

                    b.HasKey("IdLoai");

                    b.ToTable("LoaiTruyen", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.NhanVien", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool?>("StaffRole")
                        .HasColumnType("bit")
                        .HasColumnName("StaffRole");

                    b.HasKey("IdUser")
                        .HasName("PK_NhanVien");

                    b.ToTable("NhanViens");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Payment", b =>
                {
                    b.Property<string>("IdPayment")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("ExpiresTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IdPack")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<DateTimeOffset?>("PayDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("PayMethod")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PayStats")
                        .HasColumnType("tinyint");

                    b.HasKey("IdPayment")
                        .HasName("PK__Payment__613289C0E7CD2C77");

                    b.HasIndex("IdPack");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.PermissionsList", b =>
                {
                    b.Property<byte>("IdPermissions")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("ParentPermissions")
                        .HasColumnType("tinyint")
                        .HasColumnName("Parent_Permissions");

                    b.Property<string>("PermissionsName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte?>("PermissionsStats")
                        .HasColumnType("tinyint");

                    b.HasKey("IdPermissions")
                        .HasName("PK__Permissi__0671E6D9E28B434E");

                    b.ToTable("PermissionsList", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.ServicePackConfig", b =>
                {
                    b.Property<string>("IdPack")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("ActivateTimeService")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<byte?>("PackActiveStats")
                        .HasColumnType("tinyint");

                    b.Property<string>("PackName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ParentPack")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("Parent_Pack")
                        .IsFixedLength();

                    b.Property<byte?>("TicketSalary")
                        .HasColumnType("tinyint");

                    b.HasKey("IdPack")
                        .HasName("PK__Service___FC84C5ABF37A7BFC");

                    b.ToTable("Service_Pack_Config", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.StaffActiveLog", b =>
                {
                    b.Property<string>("IdLog")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<string>("ChangeDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("IdPermissions")
                        .HasColumnType("tinyint");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("TimeChanged")
                        .HasColumnType("datetime");

                    b.HasKey("IdLog")
                        .HasName("PK_Staff_Active_Logs_1");

                    b.HasIndex("IdUser", "IdPermissions");

                    b.ToTable("Staff_Active_Logs", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.StaffPermissionsDetail", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<byte>("IdPermissions")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.HasKey("IdUser", "IdPermissions")
                        .HasName("PK__Staff_Pe__37AE38558BE70804");

                    b.HasIndex("IdPermissions");

                    b.ToTable("Staff_Permissions_Detail", (string)null);
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.TacGium", b =>
                {
                    b.Property<string>("IdTg")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("id_tg")
                        .IsFixedLength();

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("TenTg")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ten_tg");

                    b.HasKey("IdTg");

                    b.ToTable("TacGia");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.User", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Birth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("TimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimeUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser")
                        .HasName("PK__Users__B7C92638206D968B");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.WebMediaConfig", b =>
                {
                    b.Property<int>("IdConfig")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConfigTitle")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdConfig")
                        .HasName("PK__WebMedia__79F21764D24494B8");

                    b.ToTable("WebMedia_Config", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectMangaSmurf.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.BoTruyen", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.TacGium", "IdTgNavigation")
                        .WithMany("BoTruyens")
                        .HasForeignKey("IdTg")
                        .IsRequired()
                        .HasConstraintName("FK_BoTruyen_TacGia");

                    b.Navigation("IdTgNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Chapter", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.BoTruyen", "IdBoNavigation")
                        .WithMany("Chapters")
                        .HasForeignKey("IdBo")
                        .IsRequired()
                        .HasConstraintName("FK_Chapter_BoTruyen");

                    b.Navigation("IdBoNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtBoTruyen", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.BoTruyen", "IbBoNavigation")
                        .WithMany("CtBoTruyens")
                        .HasForeignKey("IbBo")
                        .IsRequired()
                        .HasConstraintName("FK_CT_BoTruyen_BoTruyen");

                    b.HasOne("ProjectMangaSmurf.Models.KhachHang", "IdUserNavigation")
                        .WithMany("CtBoTruyens")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_CT_BoTruyen_KhachHang");

                    b.Navigation("IbBoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtChapter", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.Chapter", "Chapter")
                        .WithMany("CtChapters")
                        .HasForeignKey("SttChap", "IdBo")
                        .IsRequired()
                        .HasConstraintName("FK_CT_Chapter_Chapter");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtHoatDong", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.KhachHang", "IdUserNavigation")
                        .WithMany("CtHoatDongs")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_CT_HoatDong_KhachHang");

                    b.HasOne("ProjectMangaSmurf.Models.Chapter", "Chapter")
                        .WithMany("CtHoatDongs")
                        .HasForeignKey("SttChap", "IdBo")
                        .IsRequired()
                        .HasConstraintName("FK_CT_HoatDong_Chapter");

                    b.Navigation("Chapter");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CtLoaiTruyen", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.BoTruyen", "IdBoNavigation")
                        .WithMany("CtLoaiTruyens")
                        .HasForeignKey("IdBo")
                        .IsRequired()
                        .HasConstraintName("FK_CT_LoaiTruyen_BoTruyen");

                    b.HasOne("ProjectMangaSmurf.Models.LoaiTruyen", "IdLoaiNavigation")
                        .WithMany("CtLoaiTruyens")
                        .HasForeignKey("IdLoai")
                        .IsRequired()
                        .HasConstraintName("FK_CT_LoaiTruyen_LoaiTruyen");

                    b.Navigation("IdBoNavigation");

                    b.Navigation("IdLoaiNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.CustomerLogin", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.KhachHang", "IdUserNavigation")
                        .WithMany("CustomerLogins")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Customer_Login_KhachHang");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.KhachHang", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.Avatar", "IdAvatarNavigation")
                        .WithMany("KhachHangs")
                        .HasForeignKey("IdAvatar")
                        .HasConstraintName("FK_KhachHang_Avatar");

                    b.HasOne("ProjectMangaSmurf.Models.User", "IdUserNavigation")
                        .WithOne("KhachHang")
                        .HasForeignKey("ProjectMangaSmurf.Models.KhachHang", "IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_User_KhachHang");

                    b.Navigation("IdAvatarNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.NhanVien", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.User", "User")
                        .WithOne("NhanVien")
                        .HasForeignKey("ProjectMangaSmurf.Models.NhanVien", "IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_User_NhanVien");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Payment", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.ServicePackConfig", "IdPackNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdPack")
                        .HasConstraintName("FK_Payment_Service_Pack_Config");

                    b.HasOne("ProjectMangaSmurf.Models.KhachHang", "IdPaymentNavigation")
                        .WithOne("Payment")
                        .HasForeignKey("ProjectMangaSmurf.Models.Payment", "IdPayment")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_KhachHang");

                    b.Navigation("IdPackNavigation");

                    b.Navigation("IdPaymentNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.StaffActiveLog", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.StaffPermissionsDetail", "StaffPermissionsDetail")
                        .WithMany("StaffActiveLogs")
                        .HasForeignKey("IdUser", "IdPermissions")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Active_Logs_Staff_Permissions_Detail");

                    b.Navigation("StaffPermissionsDetail");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.StaffPermissionsDetail", b =>
                {
                    b.HasOne("ProjectMangaSmurf.Models.PermissionsList", "IdPermissionsNavigation")
                        .WithMany("StaffPermissionsDetails")
                        .HasForeignKey("IdPermissions")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Permissions_Detail_PermissionsList");

                    b.HasOne("ProjectMangaSmurf.Models.NhanVien", "IdUserNavigation")
                        .WithMany("StaffPermissionsDetails")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Permissions_Detail_NhanVien");

                    b.Navigation("IdPermissionsNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Avatar", b =>
                {
                    b.Navigation("KhachHangs");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.BoTruyen", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("CtBoTruyens");

                    b.Navigation("CtLoaiTruyens");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.Chapter", b =>
                {
                    b.Navigation("CtChapters");

                    b.Navigation("CtHoatDongs");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.KhachHang", b =>
                {
                    b.Navigation("CtBoTruyens");

                    b.Navigation("CtHoatDongs");

                    b.Navigation("CustomerLogins");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.LoaiTruyen", b =>
                {
                    b.Navigation("CtLoaiTruyens");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.NhanVien", b =>
                {
                    b.Navigation("StaffPermissionsDetails");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.PermissionsList", b =>
                {
                    b.Navigation("StaffPermissionsDetails");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.ServicePackConfig", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.StaffPermissionsDetail", b =>
                {
                    b.Navigation("StaffActiveLogs");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.TacGium", b =>
                {
                    b.Navigation("BoTruyens");
                });

            modelBuilder.Entity("ProjectMangaSmurf.Models.User", b =>
                {
                    b.Navigation("KhachHang")
                        .IsRequired();

                    b.Navigation("NhanVien")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
